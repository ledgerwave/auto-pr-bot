import time
import requests
import base64
from datetime import datetime, timezone
from typing import Callable, Optional

# === CONFIGURATION ===
GITHUB_TOKEN = ""  # your PAT (with repo permissions)
REPO = ""                # e.g. "luckycat/my-project"
BASE_BRANCH = "main"
HEAD_BRANCH = "dev"
INTERVAL = 10  # seconds

# === HEADERS ===
class AutoPRBot:
    def __init__(self, token: str, repo: str, base_branch: str = "main", head_branch: str = "dev", logger: Optional[Callable[[str], None]] = None):
        self.token = token
        self.repo = repo
        self.base_branch = base_branch
        self.head_branch = head_branch
        self.headers = {
            "Authorization": f"token {self.token}",
            "Accept": "application/vnd.github+json",
            "User-Agent": "auto-pr-bot"
        }
        self.log = logger if logger else print

    def branches_have_diffs(self) -> bool:
        url = f"https://api.github.com/repos/{self.repo}/compare/{self.base_branch}...{self.head_branch}"
        r = requests.get(url, headers=self.headers)
        if not r.ok:
            self.log(f"Failed to compare branches: {r.text}")
            return False
        data = r.json()
        return data.get("ahead_by", 0) > 0

    def ensure_branch_exists(self, branch: str) -> bool:
        url_ref = f"https://api.github.com/repos/{self.repo}/git/ref/heads/{branch}"
        r = requests.get(url_ref, headers=self.headers)
        if r.ok:
            return True
        if r.status_code != 404:
            self.log(f"Failed to check branch: {r.text}")
            return False
        base_ref_url = f"https://api.github.com/repos/{self.repo}/git/ref/heads/{self.base_branch}"
        base_ref = requests.get(base_ref_url, headers=self.headers)
        if not base_ref.ok:
            self.log(f"Failed to get base branch ref: {base_ref.text}")
            return False
        base_sha = base_ref.json().get("object", {}).get("sha")
        if not base_sha:
            self.log("Base branch SHA not found")
            return False
        create_ref_url = f"https://api.github.com/repos/{self.repo}/git/refs"
        payload = {"ref": f"refs/heads/{branch}", "sha": base_sha}
        created = requests.post(create_ref_url, headers=self.headers, json=payload)
        if not created.ok:
            self.log(f"Failed to create branch: {created.text}")
            return False
        self.log(f"Created branch {branch} from {self.base_branch}")
        return True

    def update_readme_on_branch(self, branch: str) -> bool:
        path = "README.md"
        timestamp = datetime.now(timezone.utc).strftime("%Y-%m-%d %H:%M:%S %Z")
        # Overwrite content entirely with new info
        new_content = (
            "# README\n\n"
            f"This file was auto-updated on {timestamp}.\n"
            "\n"
            "Changes were made by Auto PR Bot to demonstrate automated updates, PR creation, and merging.\n"
        )
        get_url = f"https://api.github.com/repos/{self.repo}/contents/{path}?ref={branch}"
        r = requests.get(get_url, headers=self.headers)
        existing_content_decoded = ""
        sha = None
        if r.status_code == 200:
            data = r.json()
            sha = data.get("sha")
            # We ignore previous content on purpose; we only need SHA to update
        elif r.status_code != 404 and not r.ok:
            self.log(f"Failed to fetch README: {r.text}")
            return False
        encoded = base64.b64encode(new_content.encode()).decode()
        put_url = f"https://api.github.com/repos/{self.repo}/contents/{path}"
        payload = {
            "message": "chore: overwrite README via auto-update",
            "content": encoded,
            "branch": branch
        }
        if sha:
            payload["sha"] = sha
        put = requests.put(put_url, headers=self.headers, json=payload)
        if not put.ok:
            self.log(f"Failed to update README: {put.text}")
            return False
        self.log(f"Updated {path} on {branch}")
        return True

    def create_pull_request(self) -> Optional[int]:
        url = f"https://api.github.com/repos/{self.repo}/pulls"
        data = {
            "title": f"Auto PR: Merge {self.head_branch} → {self.base_branch}",
            "head": self.head_branch,
            "base": self.base_branch,
            "body": "Automated PR generated by bot."
        }
        response = requests.post(url, headers=self.headers, json=data)
        if response.status_code == 422:
            text = response.text
            if "A pull request already exists" in text:
                self.log("PR already exists, skipping.")
                return None
            if "No commits between" in text:
                self.log("No commits between branches, skipping PR creation.")
                return None
        if response.ok:
            pr = response.json()
            self.log(f"Created PR #{pr['number']}")
            return pr["number"]
        else:
            self.log(f"Failed to create PR: {response.text}")
            return None

    def merge_pull_request(self, pr_number: int) -> None:
        url = f"https://api.github.com/repos/{self.repo}/pulls/{pr_number}/merge"
        data = {"merge_method": "merge"}
        response = requests.put(url, headers=self.headers, json=data)
        if response.ok:
            self.log(f"Merged PR #{pr_number}")
        else:
            self.log(f"Failed to merge PR #{pr_number}: {response.text}")

    def get_open_pr(self) -> Optional[int]:
        owner = self.repo.split('/')[0]
        url = f"https://api.github.com/repos/{self.repo}/pulls?head={owner}:{self.head_branch}&base={self.base_branch}&state=open"
        r = requests.get(url, headers=self.headers)
        if r.ok and len(r.json()) > 0:
            return r.json()[0]["number"]
        return None

    def run_once(self) -> None:
        if not self.token:
            raise ValueError("❌ Please provide a GITHUB_TOKEN")
        if not self.ensure_branch_exists(self.head_branch):
            raise SystemExit(1)
        if not self.update_readme_on_branch(self.head_branch):
            raise SystemExit(1)
        self.log("\n=== Checking for PRs ===")
        pr_number = self.get_open_pr()
        if pr_number:
            self.log(f"Found existing PR #{pr_number}, merging...")
            self.merge_pull_request(pr_number)
        else:
            if not self.branches_have_diffs():
                self.log("No diffs between dev and main. Skipping PR.")
            else:
                self.log("No PR found, creating one...")
                new_pr = self.create_pull_request()
                if new_pr:
                    self.merge_pull_request(new_pr)

    def run_loop(self, interval_seconds: int) -> None:
        while True:
            try:
                self.run_once()
            except Exception as e:
                self.log(f"Error: {e}")
            time.sleep(interval_seconds)

if __name__ == "__main__":
    bot = AutoPRBot(
        token=GITHUB_TOKEN,
        repo=REPO,
        base_branch=BASE_BRANCH,
        head_branch=HEAD_BRANCH
    )
    bot.run_once()
